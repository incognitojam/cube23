name: Publish Screenshots

on:
  pull_request_target:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  publish-screenshot:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}

    steps:
    - name: Download artifacts from PR
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.payload.pull_request.head.sha
          });
          
          // Find the most recent CI run for this PR
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head_sha: context.payload.pull_request.head.sha,
            workflow_id: 'ci.yml'
          });
          
          if (runs.data.workflow_runs.length === 0) {
            console.log('No CI runs found for this PR');
            return;
          }
          
          const latestRun = runs.data.workflow_runs[0];
          
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: latestRun.id
          });
          
          const screenshot = artifacts.data.artifacts.find(a => a.name === 'xvfb-screenshot');
          if (!screenshot) {
            console.log('No screenshot artifact found');
            return;
          }
          
          const download = await github.rest.actions.downloadArtifact({
            owner: context.repo.owner,
            repo: context.repo.repo,
            artifact_id: screenshot.id,
            archive_format: 'zip'
          });
          
          const fs = require('fs');
          fs.writeFileSync('screenshot.zip', Buffer.from(download.data));

    - name: Extract screenshot
      run: |
        unzip screenshot.zip
        ls -la

    - name: Checkout ci-artifacts repo
      uses: actions/checkout@v4
      with:
        repository: incognitojam/ci-artifacts
        token: ${{ secrets.ARTIFACTS_REPO_PAT }}
        path: ci-artifacts

    - name: Push screenshot
      working-directory: ci-artifacts
      run: |
        git checkout -b cube23/pr-${{ github.event.pull_request.number }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        cp ../screenshot.png .
        git add .
        git commit -m "screenshot for PR #${{ github.event.pull_request.number }}"
        git push origin cube23/pr-${{ github.event.pull_request.number }} --force

    - name: Comment on PR with screenshot
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const screenshotUrl = `https://raw.githubusercontent.com/incognitojam/ci-artifacts/cube23/pr-${prNumber}/screenshot.png`;

          const body = `## ðŸ“¸ Screenshot from CI

          ![Screenshot](${screenshotUrl})

          _Screenshot captured from headless Vulkan rendering in CI_`;

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: body
          });
